function Get-azsphere{
param (
    [string]$Subscription = '' ,
    [string]$GroupName = '' ,
    [string]$HubName = '' ,
    [string]$DPSName = '',
    [string]$DeviceName='',
    [boolean]$Refresh=$false
)



show-heading '  D E V I C E  P R O V I S I O N I N G  S E R V I C E (DPS)  '  2
$Prompt = '   Subscription :"' + $Subscription +'"'
write-Host $Prompt
$Prompt = '          Group :"' + $GroupName +'"'
write-Host $Prompt
$Prompt = '            Hub :"' + $HubName +'"'
write-Host $Prompt
$Prompt = ' Current Device :"' + $DeviceName +'"'
write-Host $Prompt
$Prompt = '    Current DPS :"' + $Current +'"'
write-Host $Prompt

    try{
        . ("$global:ScriptDirectory\enter-azsphere.ps1")
        . ("$global:ScriptDirectory\util\set-envvar.ps1")
    } catch {
        Write-Host "Error while loading supporting Env Vars PowerShell Scripts" 
        Write-Host $_
    }

    If ([string]::IsNullOrEmpty($Subscription ))
    {
        write-Host ''
        $prompt =  'Need to select a Subscription first.'
        write-host $prompt
        get-anykey 
        $global:DPS =  'Back'
        return
    }
    elseIf ([string]::IsNullOrEmpty($GroupName ))
    {
        write-Host ''
        $prompt = 'Need to select a Group first.'
        write-host $prompt
        get-anykey 
        $global:DPS =  'Back'
        return
    }
    elseIf ([string]::IsNullOrEmpty($HubName ))
    {
        write-Host ''
        $prompt = 'Need to select a Hub first.'
        write-host $prompt
        get-anykey 
        $global:DPS =  'Back'
        return
    }
    elseIf ([string]::IsNullOrEmpty($DPsName ))
    {
        write-Host ''
        $prompt = 'Need to select a DPS first.'
        write-host $prompt
        get-anykey 
        $global:DPS =  'Back'
        return
    }


    


    $DPSStrnIndex =3
    $DPSStrnDataIndex =5


    do{

    if ($Refresh -eq $true)
    {
	$   Refresh=$false
    }




    If ([string]::IsNullOrEmpty($global:DPSStrn ))
    {
        $Prompt = 'No DPS found in Group "' + $GroupName + '".'
        write-Host $Prompt
        $global:DPSStrn='EMPTY'
    }
        show-heading '  A Z U R E  S P H E R E '  2
        $Prompt = '   Subscription :"' + $Subscription +'"'
        write-Host $Prompt
        $Prompt = '  Current Group :"' + $GroupName +'"'
        write-Host $Prompt
        $Prompt = '    Current Hub :"' + $HubName +'"'
        write-Host $Prompt
        $Prompt = ' Current Device :"' + $DeviceName +'"'
        write-Host $Prompt
        $Prompt = '    Current DPS :"' + $Current +'"'
        write-Host $Prompt

        $options ='tenent,device-group'
        $options ='tenent-show-selected,tenent-list,tenent-select,tenent-download-ca-certificate,tenent-download-validation-certificate,device-group-create,device-group-show,device-group-device-list'
        if ($false){
            $options = 'N. New,R. Refresh'
            If (-not [string]::IsNullOrEmpty($Current )){
                $options = "$options,S. Show,U. Unselect,D. Delete"
                If (-not [string]::IsNullOrEmpty($HubName ))
                {
                    If (-not [string]::IsNullOrEmpty($env:IOTHUB_CONN_STRING_CSHARP ))
                    {
                        If (-not [string]::IsNullOrEmpty($global:HubsStrn ))
                        {

                            $options = "$options,G. Generate Env Vars for Hub Connection,C. Connect Current Hub to DPS,Z. Disconnect Current Hub from DPS" 
                        }
                    }
                }
            }
        }
        $options="$options,B. Back"

        parse-list $global:DPSStrn   '  D P S  '  $options $DPSStrnIndex $DPSStrnIndex 2  22 $Current
        $answer= $global:retVal
	write-host $answer

        If ([string]::IsNullOrEmpty($answer)) 
        {
            write-Host 'Back'
            $answer = 'Back'
        }
        elseif ($answer-eq 'Back')
        {
            write-Host 'Back'
        }
	    elseif ($answer -eq 'Error')
	    {
	        write-Host 'Error'

	    }
        elseif ($answer-eq 'Unselect')
        {
            $Current=$null
            $global:DPSName = $null 
            $DPSName =$null
        }

        elseif ($answer -eq 'New')
        {
		write-Host 'New'
	        New-DPS $Subscription $GroupName
	        $answer = $global:retVal
	        if ($answer -eq 'Done')
	        {
	            $answer  = $global:DPSName
	            $DPSName=$answer
	        }
	        elseif($answer -eq 'Exists')
	        {
	        }
	        elseif($answer -eq 'Back')
	        {
	        }
	        elseif($answer -eq 'Error')
	        {
	        }

        }
        elseif ($answer -eq 'Delete')
        {
	    	write-Host 'Delete'
            	Remove-DPS  $Subscription $GroupName $DPSName
	        $answer = $global:retVal
	        if ($answer -eq 'Done')
	        {
	            $DPSName=$null
		    $global:DPSName=$null
	        }
	        elseif($answer -eq 'Exists')
	        {
	        }
	        elseif($answer -eq 'Back')
	        {
	        }
	        elseif($answer -eq 'Error')
	        {
	        }
	}
	elseif ($answer -eq 'Refresh')
	    {
	        write-Host 'Refresh'
	        $Refresh = $true
	    }
        elseif ($answer -eq 'Show')
        {
            show-dps $Current
        }
	elseif ($answer -eq 'Connect')
        {
            $DPSName = $Current
            $global:DPSName = $Current 
            $global:retVal =  $Current
            write-host "About to run (Press [Enter] to continue):"
            read-host "az iot dps linked-hub create --dps-name $DPSName --resource-group $GroupName --connection-string $env:IOTHUB_CONN_STRING_CSHARP  --location $location -o table"
            az iot dps linked-hub create --dps-name $DPSName --resource-group $GroupName --connection-string $env:IOTHUB_CONN_STRING_CSHARP  --location $location  -o table
            show-dps $Current
        }
        elseif ($answer -eq 'Disconnect')
        {
            $DPSName = $Current
            $global:DPSName = $Current 
            $global:retVal =  $Current
            $ExtenedHubName = "$HubName.azure-devices.net"
            write-host "About to run (Press [Enter] to continue):"
            read-host "az iot dps linked-hub delete --dps-name $DPSName --resource-group $GroupName --linked-hub $ExtenedHubName -o table"
            $ExtenedHubName = "$HubName.azure-devices.net"
            az iot dps linked-hub delete --dps-name $DPSName --resource-group $GroupName --linked-hub $ExtenedHubName -o table
            show-dps $Current
        } 
        elseif ($answer -eq 'Generate')
        {
            set-env $Subscription $GroupName $HubName $DeviceName
        } 
        elseif ($answer -ne $global:DPSName)
        {
            $global:DPSName = $answer 
            $global:retVal =  $answer
            $DPSName =$answer
            if ($global:doneItem)
            {
                $answer='Back'              
            }
            $global:doneItem = $null
        }

    } while (($answer -ne 'Back') -and ($answer -ne 'Error'))

    $global:retval = $answer
}

function show-dps{
param (
    [string]$DPSName = ''
)
    If (-not [string]::IsNullOrEmpty($DPSName ))
    {
        write-Host ''
        write-Host "$DPSName (Wait):"
        az iot dps show --name $DPSName -o table
 
        write-Host ''
        write-Host "Getting DPS: $DPSName info (Wait) :"
        $query = az iot dps show --name $DPSName -o json | Out-String | ConvertFrom-Json
        write-Host "DPS ID Scope:"
        foreach ($dps in $query) {$dps.Properties.idScope}
        write-Host "Connected Hubs:"
        foreach ($dps in $query) {$dps.Properties.iotHubs.name}

    }
    write-Host ''
    get-anykey
}

login
tenant
 - show-selected
 - create --name
 - tenant select --tenantid
device claim
device enable-development
device wifi show-status
device wifi add --ssid <yourSSID> --psk <yourNetworkKey>
device show-deployment-status

1.
azsphere tenant download-CA-certificate --output CAcertificate137.cer
2.
az iot dps certificate create --subscription $global:subscription --dps-name $global:DPSName --resource-group $global:GroupName --name MyCertificate139 --path CAcertificate139.cer
get etag
az iot dps certificate generate-verification-code --subscription $Subscription --dps-name $DPSName --resource-group $GroupName --name MyCertificate139 --etag AAAAAALTXOI=
get verification code
4.
azsphere tenant download-validation-certificate --output ValidationCertification139.cer --verificationcode 94B495CF0C6137825695F87AF684DEB073B3B8DB8B241B97

5.
In portal upload and verify verify

device-group-create



Microsoft Azure Sphere bfbe8861-c64c-4eae-a3f2-9adf312d2efd
Microsoft Azure Sphere bfbe8861-c64c-4eae-a3f2-9adf312d2efd

azsphere device-group create -name newgroup2  -description newkid 

az iot dps certificate list --dps-name DPSName --resource-group GroupName

az iot dps certificate verify --dps-name $DPSName --resource-group $GroupName --name MyCertificate137 --path ValidationCertification139.cer --etag AAAAAALTXOI=


=========
	$MyCertifcateName="MyCertificate137"
	$CAcertificate="CAcertificate137"
	$ValidationCertification="ValidationCertification137"
azsphere tenant download-CA-certificate --output $CAcertificate=.cer
az iot dps certificate create --subscription $global:subscription --dps-name $global:DPSName --resource-group $global:GroupName --name $MyCertifcateName --path $CAcertificate.cer

{
  "etag": "AAAAAALTXOI=",
  "id": "/subscriptions/81514943-cb78-476c-978f-efaa554fbab5/resourceGroups/StreamMeUp/providers/Microsoft.Devices/provisioningServices/DPStreamMe/certificates/MyCertificate139",
  "name": "MyCertificate139",
  "properties": {
    "certificate": "MIIChjCCAiygAwIBAgIQFQeful+MUW9cFPQn+J1cWjAKBggqhkjOPQQDAjB7MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQDExxNaWNyb3NvZnQgQXp1cmUgU3BoZXJlIFBDQTAxMB4XDTE4MDgzMTIzMzYzOVoXDTIwMDgzMTIzNDYzOVowgZoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xRDBCBgNVBAMTO01pY3Jvc29mdCBBenVyZSBTcGhlcmUgYmZiZTg4NjEtYzY0Yy00ZWFlLWEzZjItOWFkZjMxMmQyZWZkMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEajYEBEDezbA36f2qoyWhrFvd5FMlIxJWhCaa3T6Q4UPewu0B6TUr5/MBxQEVPXeUSQm/v9nZSG0AzHVCcOevn6NyMHAwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wTQYDVR0fBEYwRDBCoECgPoY8aHR0cDovL2NybC5zcGhlcmUuYXp1cmUubmV0L01pY3Jvc29mdCBBenVyZSBTcGhlcmUgUENBMDEuY3JsMAoGCCqGSM49BAMCA0gAMEUCIQCWrp53PVMKTS7Gvi4+sjAws35OvoDjRFCYcGzo60F4RQIgdYEHQVOj4O6Nbez4DNnEHo+6oJd9JZspXiA5ZQMOlzw=",
    "created": "2020-04-21T05:37:39+00:00",
    "expiry": "2020-08-31T23:46:39+00:00",
    "isVerified": false,
    "subject": "Microsoft Azure Sphere bfbe8861-c64c-4eae-a3f2-9adf312d2efd",
    "thumbprint": "34175887D434A23484EB1145C010D22F3312F780",
    "updated": "2020-04-21T05:37:39+00:00"
  },
  "resourceGroup": "StreamMeUp",
  "type": "Microsoft.Devices/provisioningServices/Certificates"
}

	$etag="AAAAAALTXOI="
az iot dps certificate generate-verification-code --subscription $Subscription --dps-name $DPSName --resource-group $GroupName --name $MyCertifcateName  --etag $etag

{
  "etag": "AAAAAALTXUo=",
  "id": "/subscriptions/81514943-cb78-476c-978f-efaa554fbab5/resourceGroups/StreamMeUp/providers/Microsoft.Devices/provisioningServices/DPStreamMe/certificates/MyCertificate139",
  "name": "MyCertificate139",
  "properties": {
    "certificate": null,
    "created": "Tue, 21 Apr 2020 05:37:39 GMT",
    "expiry": "Mon, 31 Aug 2020 23:46:39 GMT",
    "isVerified": false,
    "subject": "Microsoft Azure Sphere bfbe8861-c64c-4eae-a3f2-9adf312d2efd",
    "thumbprint": "34175887D434A23484EB1145C010D22F3312F780",
    "updated": "Tue, 21 Apr 2020 05:38:27 GMT",
    "verificationCode": "94B495CF0C6137825695F87AF684DEB073B3B8DB8B241B97"
  },
  "resourceGroup": "StreamMeUp",
  "type": "Microsoft.Devices/provisioningServices/Certificates"
}

	$verificationcode="94B495CF0C6137825695F87AF684DEB073B3B8DB8B241B97"
azsphere tenant download-validation-certificate --output $ValidationCertification.cer --verificationcode $verificationcode

	# az iot dps certificate verify --dps-name $DPSName --resource-group $GroupName --name $MyCertifcateName  --path $ValidationCertification.cer --etag $etag










    az iot dps enrollment-group list --dps-name   $DPSName    --resource-group $GroupName

    az iot dps enrollment-group create -g $GroupName --dps-name $DPSName --enrollment-id Enrollme --ca-name MyCertificate139




az iot dps certificate create  --dps-name $DPSName --resource-group$GroupName --name MyCertificate --path CAcertificate.cer



